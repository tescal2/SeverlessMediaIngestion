Description: "Serverless Media Ingestion Process (Feb 2017)"
Parameters: 
  CodeBucketName: 
    Type: "String"
    Description: "S3 Bucket containing Lambda code, etc"
    AllowedPattern: "^(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])$"
  ClientRoleName: 
    Type: "String"
    Description: "Client Role Name"
    AllowedPattern: ".*"
  HostedZoneName: 
    Type: "String"
    Description: "Route53 Hosted Zone Name"
    AllowedPattern: "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*).$"
  AcmCertificateArn:
    Type: "String"
    Description: "ACM Certificate ARN"
    AllowedPattern: "^arn:aws:acm:us-east-1:\\d{12}:certificate/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
Resources: 
  CustomResourcesLambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          Effect: "Allow"
          Principal: 
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Policy"
          PolicyDocument: 
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - 
                Effect: "Allow"
                Action: 
                  - "elastictranscoder:CreatePipeline"
                  - "elastictranscoder:DeletePipeline"
                  - "elastictranscoder:ListPipelines"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "iam:PassRole"
                Resource: !GetAtt "ETRole.Arn"
              - 
                Effect: "Allow"
                Action: 
                  - "s3:GetBucketNotification"
                  - "s3:PutBucketNotification"
                Resource: !Sub "arn:aws:s3:::${S3Bucket}"
              - 
                Effect: "Allow"
                Action: 
                  - "cloudfront:CreateCloudFrontOriginAccessIdentity"
                  - "cloudfront:ListCloudFrontOriginAccessIdentities"
                  - "cloudfront:GetCloudFrontOriginAccessIdentity"
                  - "cloudfront:DeleteCloudFrontOriginAccessIdentity"
                Resource: "*"
  CustomResourcesLambdaFunction: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: 
        S3Bucket: !Ref "CodeBucketName"
        S3Key: "CustomResourcesLambda.zip"
      Description: !Sub "ServerlessMedia ${AWS::StackName} CloudFormation custom resources Lambda function"
      Handler: "index.handler"
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt "CustomResourcesLambdaRole.Arn"
      Runtime: "nodejs4.3"
  S3Bucket: 
    Type: "AWS::S3::Bucket"
    Properties: 
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}"
      CorsConfiguration: 
        CorsRules: 
          - 
            AllowedOrigins: 
              - "http*"
            AllowedMethods: 
              - "HEAD"
              - "GET"
              - "PUT"
              - "POST"
              - "DELETE"
            AllowedHeaders: 
              - "*"
            ExposedHeaders: 
              - "ETag"
              - "x-amz-meta-custom-header"
      VersioningConfiguration: 
        Status: "Enabled"
  S3BucketPolicy: 
    Type: "AWS::S3::BucketPolicy"
    Properties: 
      Bucket: !Ref "S3Bucket"
      PolicyDocument: 
        Statement: 
          - 
            Effect: "Allow"
            Action: "s3:GetObject"
            Principal: 
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CFOriginAccessIdentity.Id}"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  S3BucketObjectCreatedNotification: 
    Type: "Custom::S3BucketNotification"
    Properties: 
      ServiceToken: !GetAtt "CustomResourcesLambdaFunction.Arn"
      Bucket: !Ref "S3Bucket"
      KeyPrefix: "inputs/"
      Events: 
        - "s3:ObjectCreated:*"
      FunctionArn: !GetAtt "S3ObjectCreatedLambdaFunction.Arn"
      FunctionArgs: 
        PipelineId: !GetAtt "ETPipeline.Id"
        TableName: !Ref "DBTable"
    DependsOn: "S3Bucket"
  S3BucketObjectDeletedNotification: 
    Type: "Custom::S3BucketNotification"
    Properties: 
      ServiceToken: !GetAtt "CustomResourcesLambdaFunction.Arn"
      Bucket: !Ref "S3Bucket"
      KeyPrefix: "inputs/"
      Events: 
        - "s3:ObjectRemoved:*"
      FunctionArn: !GetAtt "S3ObjectDeletedLambdaFunction.Arn"
      FunctionArgs: 
        TableName: !Ref "DBTable"
    DependsOn: "S3Bucket"
  ETPipeline: 
    Type: "Custom::ElasticTranscoderPipeline"
    Properties: 
      ServiceToken: !GetAtt "CustomResourcesLambdaFunction.Arn"
      InputBucket: !Ref "S3Bucket"
      OutputBucket: !Ref "S3Bucket"
      CompletedTopicArn: !Ref "ETJobCompletedTopic"
      RoleArn: !GetAtt "ETRole.Arn"
    DependsOn: "S3Bucket"
  S3ObjectCreatedLambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          Effect: "Allow"
          Principal: 
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Policy"
          PolicyDocument: 
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - 
                Effect: "Allow"
                Action: "s3:GetObject"
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - 
                Effect: "Allow"
                Action: 
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DBTable}"
              - 
                Effect: "Allow"
                Action: "elastictranscoder:CreateJob"
                Resource: 
                  - !GetAtt "ETPipeline.Arn"
                  - !Sub "arn:aws:elastictranscoder:${AWS::Region}:${AWS::AccountId}:preset/*"
  S3ObjectCreatedLambdaFunction: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: 
        S3Bucket: !Ref "CodeBucketName"
        S3Key: "S3ObjectCreatedLambda.zip"
      Description: !Sub "ServerlessMedia ${AWS::StackName} S3 object-created Lambda function"
      Handler: "index.handler"
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt "S3ObjectCreatedLambdaRole.Arn"
      Runtime: "nodejs4.3"
  S3ObjectCreatedLambdaPermission: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt "S3ObjectCreatedLambdaFunction.Arn"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${S3Bucket}"
  S3ObjectDeletedLambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          Effect: "Allow"
          Principal: 
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Policy"
          PolicyDocument: 
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - 
                Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                Condition: 
                  StringLike: 
                    s3:prefix: "outputs/*"
              - 
                Effect: "Allow"
                Action: "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/outputs/*"
              - 
                Effect: "Allow"
                Action: "dynamodb:DeleteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DBTable}"
  S3ObjectDeletedLambdaFunction: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: 
        S3Bucket: !Ref "CodeBucketName"
        S3Key: "S3ObjectDeletedLambda.zip"
      Description: !Sub "ServerlessMedia ${AWS::StackName} S3 object-deleted Lambda function"
      Handler: "index.handler"
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt "S3ObjectDeletedLambdaRole.Arn"
      Runtime: "nodejs4.3"
  S3ObjectDeletedLambdaPermission: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt "S3ObjectDeletedLambdaFunction.Arn"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${S3Bucket}"
  ETRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          Effect: "Allow"
          Principal: 
            Service: "elastictranscoder.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Policy"
          PolicyDocument: 
            Statement: 
              - 
                Effect: "Allow"
                Action: "s3:GetObject"
                Resource: 
                  - !Sub "arn:aws:s3:::%{S3Bucket}/inputs/*"
              - 
                Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                Condition: 
                  StringLike: 
                    s3:prefix: "outputs/*"
              - 
                Effect: "Allow"
                Action: 
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListMultipartUploadParts"
                  - "s3:AbortMultipartUpload"
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/outputs/*"
              - 
                Effect: "Allow"
                Action: "sns:Publish"
                Resource: "*"
  ETJobCompletedLambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          Effect: "Allow"
          Principal: 
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Policy"
          PolicyDocument: 
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - 
                Effect: "Allow"
                Action: "s3:GetObject"
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Bucket}/outputs/*"
              - 
                Effect: "Allow"
                Action: 
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DBTable}"
  ETJobCompletedLambdaFunction: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: 
        S3Bucket: !Ref "CodeBucketName"
        S3Key: "ETJobCompletedLambda.zip"
      Description: !Sub "ServerlessMedia ${AWS::StackName} Elastic Transcoder job-created Lambda function"
      Handler: "index.handler"
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt "ETJobCompletedLambdaRole.Arn"
      Runtime: "nodejs4.3"
  ETJobCompletedLambdaPermission: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt "ETJobCompletedLambdaFunction.Arn"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref "ETJobCompletedTopic"
  ETJobCompletedTopic: 
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub "ServerlessMedia ${AWS::StackName} Elastic Transcoder job-created SNS topic"
      Subscription: 
        - 
          Endpoint: !GetAtt "ETJobCompletedLambdaFunction.Arn"
          Protocol: "lambda"
      TopicName: !Sub "${AWS::StackName}-ElasticTranscoderCompleted"
  DBTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      TableName: !Ref AWS::StackName
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  CFOriginAccessIdentity: 
    Type: "Custom::CloudFrontOriginAccessIdentity"
    Properties: 
      ServiceToken: !GetAtt CustomResourcesLambdaFunction.Arn
  CFDistribution: 
    Type: "AWS::CloudFront::Distribution"
    Properties: 
      DistributionConfig: 
        Enabled: "true"
        Aliases: 
          - !Sub "${AWS::StackName}.${HostedZoneName}"
        DefaultRootObject: "index.html"
        ViewerCertificate:
          AcmCertificateArn: !Ref "AcmCertificateArn"
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior: 
          TargetOriginId: "Origin"
          ForwardedValues: 
            QueryString: "false"
            Headers: 
              - "Origin"
            Cookies: 
              Forward: "none"
          ViewerProtocolPolicy: "redirect-to-https"
        Origins: 
          - 
            Id: "Origin"
            DomainName: !GetAtt "S3Bucket.DomainName"
            S3OriginConfig: 
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CFOriginAccessIdentity.Id}"
  R53RecordSet: 
    Type: "AWS::Route53::RecordSet"
    Properties: 
      Type: "A"
      AliasTarget: 
        DNSName: !GetAtt "CFDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2" # this is CloudFront's hosted zone
      Comment: !Sub "Record for ${AWS::StackName}"
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !Sub "${AWS::StackName}.${HostedZoneName}."
  ClientRolePolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "s3:ListBucket"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}"
            Condition: 
              StringLike: 
                s3:prefix: 
                  - "inputs/*"
          - 
            Effect: "Allow"
            Action: 
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/inputs/*"
          - 
            Effect: "Allow"
            Action: 
              - "dynamodb:GetItem"
              - "dynamodb:BatchGetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DBTable}"
      PolicyName: !Ref AWS::StackName
      Roles: 
        - !Ref "ClientRoleName"
Outputs: 
  CustomResourcesLambdaArn: 
    Description: "Custom Resources Lambda ARN"
    Value: !GetAtt "CustomResourcesLambdaFunction.Arn"
  ETPipelineArn: 
    Description: "Elastic Transcoder Pipeline ARN"
    Value: !GetAtt "ETPipeline.Arn"
  ETPipelineId: 
    Description: "Elastic Transcoder Pipeline ID"
    Value: !GetAtt "ETPipeline.Id"
  S3BucketName: 
    Description: "S3 Bucket Name"
    Value: !Ref "S3Bucket"
  S3BucketArn: 
    Description: "S3 Bucket ARN"
    Value: !Sub "arn:aws:s3:::${S3Bucket}"
  S3ObjectCreatedLambdaArn: 
    Description: "S3 Object-Created Lambda ARN"
    Value: !GetAtt "S3ObjectCreatedLambdaFunction.Arn"
  S3ObjectDeletedLambdaArn: 
    Description: "S3 Object-Deleted Lambda ARN"
    Value: !GetAtt "S3ObjectDeletedLambdaFunction.Arn"
  ETRoleArn: 
    Description: "Elastic Transcoder Role ARN"
    Value: !GetAtt "ETRole.Arn"
  ETJobCompletedLambdaArn: 
    Description: "Elastic Transcoder Job Completed Lambda ARN"
    Value: !GetAtt "ETJobCompletedLambdaFunction.Arn"
  ETJobCompletedTopicArn: 
    Description: "Elastic Transcoder Job Completed Topic ARN"
    Value: !Ref "ETJobCompletedTopic"
  DBTableName: 
    Description: "DynamoDB Table Name"
    Value: !Ref DBTable
  CFOriginAccessIdentityId: 
    Description: "CloudFront Origin Access Identity ID"
    Value: !GetAtt "CFOriginAccessIdentity.Id"
  CFDistributionId: 
    Description: "CloudFront Distribution ID"
    Value: !Ref "CFDistribution"
  CFDistributionDomainName: 
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt "CFDistribution.DomainName"
  R53RecordSetName: 
    Description: "Route53 RecordSet Name"
    Value: !Ref "R53RecordSet"
  URL: 
    Description: "URL"
    Value: !Sub "http://${R53RecordSet}"
